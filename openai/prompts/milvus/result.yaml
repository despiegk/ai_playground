openapi: 3.0.0
info:
  title: Milvus Vector Collection API
  version: 1.0.0
  description: API for managing collections in a Milvus vector database cluster.
servers:
  - url: https://{MILVUS_HOST}:{MILVUS_PORT}/v1
    description: Milvus API server
paths:
  /vector/collections/create:
    post:
      summary: Create a Collection
      description: Creates a collection in a cluster.
      operationId: createCollection
      tags:
        - Collections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dbName:
                  type: string
                  description: The name of the database to which the collection belongs.
                collectionName:
                  type: string
                  description: The name of the collection to create.
                  required: true
                dimension:
                  type: integer
                  description: The number of dimensions for the vector field of the collection.
                  required: true
                metricType:
                  type: string
                  description: The distance metric used for the collection. Defaults to L2.
                primaryField:
                  type: string
                  description: The primary key field. Defaults to id.
                vectorField:
                  type: string
                  description: The vector field. Defaults to vector.
                description:
                  type: string
                  description: The description of the collection.
      responses:
        '200':
          description: Collection created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
        '400':
          description: Bad request, such as missing required parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1802
                  message:
                    type: string
        '401':
          description: Unauthorized, user hasn't authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1800
                  message:
                    type: string
        '404':
          description: Database not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 800
                  message:
                    type: string
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1803
                  message:
                    type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
